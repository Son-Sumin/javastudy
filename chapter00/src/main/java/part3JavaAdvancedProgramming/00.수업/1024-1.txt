1024-1
chapter02. 객체지향의 기본개념

* 분석을 통해 책(객체)의 공통점을 뽑아내어 entity를 만들고 entity는 class Books가 된다

* UML(Unified Modeling Language); ERD같은 개념으로 객체들과의 관계를 보여줌

* 우선성을 갖는다;
book table을 만들기 위해 book이 존재해야함. 이를 book table이 book에 대해 우선성을 갖는다고 표현함

method를 통해 객체에게 message를 날린다.
객체에게 method를 호출한다.

* 추상화; 중요한 것은 남기고 불필요한 것을 없애는 것을 객체지향에서는 추상화라고 함.

* 재사용성이 좋다;
- class 자체를 재사용하는 것을 의미하는 것이 아님.
- class는 객체가 갖는 속성과 기능에 맞게 만들었기에 class를 재사용하는 것이 어려움.
- 상속을 통해 코드를 재사용하는 것을 말함.
- 상위 클래스(부모 클래스)에 있는 코드이면 하위 클래스에서 그 코드를 명시하지 않아도 하위 클래스에서 사용 가능함.

* class, instance, reference
객체들의 공통점을 뽑아 class 생성 후
b= new 책()을 통해 '메모리 book'(instance)을 만들어냄
이후 b.___을 통해 사용함
객체 b를 통해 instance를 참조(reference)함
ex. 책장이라는 인스턴스를 만들고, 이를 책장 타입의 레퍼런스 변수 c1이 해당 인스턴스를 reference(참조)한다.

메모리 안에 객체가 생기는 것을 instance라고 함
실제로는 객체, object, instance 등을 혼용해서 쓰긴 함

* 추상 class;
- 이름은 존재하나 인스턴스화할 수 없는 클래스, 즉 new를 못 붙임
- 추상 class는 일반화하기 위해 사용함
- 이탤릭 체로 표현하면 추상 클래스
- 주로 부모클래스에서 발생함. 부모 클래스가 추상 클래스가 될 수 있는 것이지 꼭 되는 것은 아님.
- 위로 올린 공통점이 구현이 되지 않으면 추상class의 추상 method가 됨.
- 하나라도 구현되지 않는 method가 존재하면 추상클래스임
- 구현이 되면 추상 클래스가 되지 않음, 아니면 에러 발생함.
- 하위 클래스에 세부적으로 부여하면 됨.

* 일반화;
공통점이 있는 여러 물체들을 하나의 이름으로 부르는 것
공통 기능이 있는 것을 위로 올림, 부모 클래스로 만들기
ex. 동물, 포유류, 음식 등
고래는 동물이다

* 상속의 2가지 기능
1. 재사용
2. 확장성; class A(son) extends B(parents)라 표현함
To understanding extension we have to know ...
 - 자식 객체는 부모클래스로 참조할 수 있다
 - 같은 표현이지만 객체 선택에 따라 구현되는 결과가 다름

* overriding(상속 관계에서 발생함  부모 method가 아닌 자식 method 사용함)
     cf. overloading(쌓인 methods 사용 가능); 동일한 위치에서 발생
부모 class의 움직이다라는 method를 사람, 개, 고래 등의 객체 선택에 따라 걷다, 기다, 헤엄치다로 표현됨
  ex. 포유류 m = new 사람()
    움직이다.사람() = 걷다
    움직이다.개() = 기다
    움직이다.고래() = 헤엄치다

[객체지향 설계 원칙 (SOLID)]
** OCP (Open-Closed Principle) : 개방 폐쇄 원칙
확장에는 열려있고, 수정에는 닫혀 있어야 함
커플링; 둘의 관계가 너무 직접적으로 연결되어 있으면 분리가 힘듦
버스-주차하다
버스-자동차-주차하다

** ISP (Interface Segragation Principle) : 인터페이스 분리 원칙
추상 method로만 이루어짐
변수 존재 안함
캡슐화 발생
부모클래스보다 훨씬 확장성이 좋게 만듦
주차하다하는 interface(중간단계)를 만들어 택시, 버스, 포크레인, 비행기까지 주차 가능
버스-자동차 ->주차하다
주차시스템(주차하다 보유) -> IParkable <- 자동차(부모 클래스, 추상 클래스), 비행기(직접구현)
				  버스, 택시, 포크레인은 자동차 부모클래스에 overriding

--------------------------------------------------------
향후 수업내용 >> 
1. CLASS
 - 변수
 - 메소드(함수)
 - 생성자(new OO)

2. 정보은닉(캡슐화)

3. 상속 * 생성자가 어떻게 작용하는지

4. 다형성 *객체지향의 꽃
  - 오버로딩(Overloading); 하나의 클래스에서 발생
  - 오버라이딩(Overiding); 상속 관계에서 발생

5. 추상클래스, 인터페이스

6. API